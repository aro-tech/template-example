package org.example;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * {@link Company} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CompanyAssert extends AbstractAssert<CompanyAssert, Company> {

  /**
   * Creates a new <code>{@link CompanyAssert}</code> to make assertions on actual Company.
   * @param actual the Company we want to make assertions on.
   */
  public CompanyAssert(Company actual) {
    super(actual, CompanyAssert.class);
  }

  /**
   * An entry point for CompanyAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCompany)</code> and get specific assertion with code completion.
   * @param actual the Company we want to make assertions on.
   * @return a new <code>{@link CompanyAssert}</code>
   */
  public static CompanyAssert assertThat(Company actual) {
    return new CompanyAssert(actual).as("Generated assertion for Company");
  }
  


  /**
   * Verifies that the actual Company's address is equal to the given one.
   * @param address the given address to compare the actual Company's address to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Company's address is not equal to the given one.
   */
  public CompanyAssert hasAddress(Address address) {
    // check that actual Company we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Address actualAddress = actual.getAddress();
    if (!Objects.areEqual(actualAddress, address)) {
      failWithMessage(assertjErrorMessage, actual, address, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }
  
  /**
   * Verifies that the actual Company's address matches the given Predicate.
   * @param addressPredicate the given Predicate to evaluate the actual Company's address.
   * @return this assertion object.
   * @throws AssertionError - if the actual Company's address does not match the given predicate.
   */
  public CompanyAssert hasAddressMatching(java.util.function.Predicate<Address> addressPredicate) {
    // check that actual Company we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nProperty address of:\n  <%s>\nfailed to match a given Predicate";
    
    // null safe check
    Address actualAddress = actual.getAddress();
    if (!addressPredicate.test(actualAddress)) {
      failWithMessage(assertjErrorMessage, actual, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }
  
     /**
   * Maps this CompanyAssert instance to a StringAssert on the toString of the actual object 
   * @return A StringAssert for the toString of this Assertion's actual object
   */
  public org.assertj.core.api.AbstractCharSequenceAssert<?, String> hasAddressAsString() {
	    this.isNotNull();
		return org.assertj.core.api.Assertions.assertThat("" + actual.getAddress()).asString();
  }

  /**
   * Verifies that the actual Company's name is equal to the given one.
   * @param name the given name to compare the actual Company's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Company's name is not equal to the given one.
   */
  public CompanyAssert hasName(String name) {
    // check that actual Company we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }
  
  /**
   * Verifies that the actual Company's name matches the given Predicate.
   * @param namePredicate the given Predicate to evaluate the actual Company's name.
   * @return this assertion object.
   * @throws AssertionError - if the actual Company's name does not match the given predicate.
   */
  public CompanyAssert hasNameMatching(java.util.function.Predicate<String> namePredicate) {
    // check that actual Company we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nProperty name of:\n  <%s>\nfailed to match a given Predicate";
    
    // null safe check
    String actualName = actual.getName();
    if (!namePredicate.test(actualName)) {
      failWithMessage(assertjErrorMessage, actual, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }
  
     /**
   * Maps this CompanyAssert instance to a StringAssert on the toString of the actual object 
   * @return A StringAssert for the toString of this Assertion's actual object
   */
  public org.assertj.core.api.AbstractCharSequenceAssert<?, String> hasNameAsString() {
	    this.isNotNull();
		return org.assertj.core.api.Assertions.assertThat("" + actual.getName()).asString();
  }

}
